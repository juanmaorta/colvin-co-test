// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CardList snapshots should match for CardList component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardList
    cards={
        Array [
            Object {
              "id": 1,
              "text": "Goldfinger: He's the man, the man with...",
            },
            Object {
              "id": 2,
              "text": "Instead of coal, Santa now gives the bad children...",
            },
            Object {
              "id": 3,
              "text": "Knock knock. Who's there?",
            },
          ]
    }
    classes={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(BlackCard)
          card={
                    Object {
                              "id": 1,
                              "text": "Goldfinger: He's the man, the man with...",
                            }
          }
          editable={true}
          handleDelete={[Function]}
          handleEdit={[Function]}
/>,
        <WithStyles(BlackCard)
          card={
                    Object {
                              "id": 2,
                              "text": "Instead of coal, Santa now gives the bad children...",
                            }
          }
          editable={true}
          handleDelete={[Function]}
          handleEdit={[Function]}
/>,
        <WithStyles(BlackCard)
          card={
                    Object {
                              "id": 3,
                              "text": "Knock knock. Who's there?",
                            }
          }
          editable={true}
          handleDelete={[Function]}
          handleEdit={[Function]}
/>,
      ],
      "container": true,
      "spacing": 40,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "class",
        "props": Object {
          "card": Object {
            "id": 1,
            "text": "Goldfinger: He's the man, the man with...",
          },
          "editable": true,
          "handleDelete": [Function],
          "handleEdit": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "card": Object {
            "id": 2,
            "text": "Instead of coal, Santa now gives the bad children...",
          },
          "editable": true,
          "handleDelete": [Function],
          "handleEdit": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "card": Object {
            "id": 3,
            "text": "Knock knock. Who's there?",
          },
          "editable": true,
          "handleDelete": [Function],
          "handleEdit": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(BlackCard)
            card={
                        Object {
                                    "id": 1,
                                    "text": "Goldfinger: He's the man, the man with...",
                                  }
            }
            editable={true}
            handleDelete={[Function]}
            handleEdit={[Function]}
/>,
          <WithStyles(BlackCard)
            card={
                        Object {
                                    "id": 2,
                                    "text": "Instead of coal, Santa now gives the bad children...",
                                  }
            }
            editable={true}
            handleDelete={[Function]}
            handleEdit={[Function]}
/>,
          <WithStyles(BlackCard)
            card={
                        Object {
                                    "id": 3,
                                    "text": "Knock knock. Who's there?",
                                  }
            }
            editable={true}
            handleDelete={[Function]}
            handleEdit={[Function]}
/>,
        ],
        "container": true,
        "spacing": 40,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "class",
          "props": Object {
            "card": Object {
              "id": 1,
              "text": "Goldfinger: He's the man, the man with...",
            },
            "editable": true,
            "handleDelete": [Function],
            "handleEdit": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "card": Object {
              "id": 2,
              "text": "Instead of coal, Santa now gives the bad children...",
            },
            "editable": true,
            "handleDelete": [Function],
            "handleEdit": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "card": Object {
              "id": 3,
              "text": "Knock knock. Who's there?",
            },
            "editable": true,
            "handleDelete": [Function],
            "handleEdit": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
